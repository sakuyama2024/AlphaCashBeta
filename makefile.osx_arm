
CXX = g++

# Default build mode
BUILD ?= debug

# Common include directories and flags from wx-config
WX_CXXFLAGS = $(shell wx-config --cxxflags)
WX_LDFLAGS = $(shell wx-config --libs)

# Common include directories
INCLUDE_DIRS = \
-I/opt/homebrew/opt/berkeley-db/include \
-I/opt/homebrew/opt/cryptopp/include/cryptopp \
-I/opt/homebrew/opt/boost/include \
-I/opt/homebrew/opt/boost/include/boost \
-I/opt/homebrew/opt/openssl@3/include \

# Common flags
COMMONFLAGS = -std=gnu++2b -w -Wno-invalid-offsetof -Wformat -DENABLE_ARM_SHANI 


# Debug mode settings
DEBUGFLAGS = -g -O0
DEBUG_CXXFLAGS = $(COMMONFLAGS) $(DEBUGFLAGS) $(INCLUDE_DIRS) $(WX_CXXFLAGS)

# Release mode settings
RELEASEFLAGS = -O3 -march=armv8.4-a+crypto
RELEASE_CXXFLAGS = $(COMMONFLAGS) $(RELEASEFLAGS) $(INCLUDE_DIRS) $(WX_CXXFLAGS)

# Choose the appropriate flags
ifeq ($(BUILD),debug)
    CXXFLAGS = $(DEBUG_CXXFLAGS)
else ifeq ($(BUILD),release)
    CXXFLAGS = $(RELEASE_CXXFLAGS)
endif

LIBPATHS = -L/usr/lib -L/usr/local/lib -L/opt/homebrew/opt/berkeley-db/lib \
-L/opt/homebrew/opt/boost/lib -L/opt/homebrew/opt/openssl@3/lib -L/opt/homebrew/lib \

LIBS = -Wl,-lboost_system -lboost_filesystem -ldb_cxx -lcryptopp -lcrypto -lssl $(WX_LDFLAGS)\

# Header files
HEADERS = base58.h bignum.h byteswap.h common.h db.h endian.h headers.h key.h alphautil.h main.h \
market.h net.h rpc.h script.h serialize.h sha256.h ui.h uibase.h uint256.h util.h 

# Source files
SRC_FILES = alphautil.cpp db.cpp init.cpp main.cpp net.cpp rpc.cpp script.cpp sha256.cpp sha256_arm_shani.cpp \
ui.cpp uibase.cpp util.cpp

# Object files
OBJS = $(SRC_FILES:.cpp=.o)


# Target to build the command line executable
alphacash: $(OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $(LIBPATHS) $(OBJS) $(LIBS)

# Target to build the executable
alphacashd: $(OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $(LIBPATHS) $(OBJS) $(LIBS)

# Target to build all executables
all: alphacash alphacashd

# Pattern rule for object files
%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CXXFLAGS) -o $@ $<

# Clean up
clean:
	rm -f *.o alphacashd alphacash

